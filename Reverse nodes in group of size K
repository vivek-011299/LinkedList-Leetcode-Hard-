/*
*
Given a linked list, reverse the nodes of a linked list k at a time and return its modified list.

k is a positive integer and is less than or equal to the length of the linked list. If the number of nodes is not a multiple of k then left-out nodes, in the end, should remain as it is.

You may not alter the values in the list's nodes, only nodes themselves may be changed.
*
*/

Sample Input :-

Input: head = [1,2,3,4,5], k = 2
Output: [2,1,4,3,5].


Solution :-

ListNode* reverseKGroup(ListNode* head, int k) {
        if(head==NULL || k==1)
            return head;
        ListNode *dummy=new ListNode();
        dummy->next=head;
        ListNode *curr=head;
        ListNode *pre = dummy;
        ListNode *nex = dummy;
        int count=1;
        while(curr->next)
        {
            curr=curr->next;
            count++;
        }
        while(count>=k)
        {
            curr=pre->next;
            nex=curr->next;
            for(int i=1;i<k;i++)
            {
                curr->next = nex->next;
                nex->next=pre->next;
                pre->next=nex;
                nex=curr->next;
            }
            pre=curr;
            count-=k; 
        }
        return dummy->next;
    }
