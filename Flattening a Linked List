/*
*
Given a Linked List of size N, where every node represents a sub-linked-list and contains two pointers:
(i) a next pointer to the next node,
(ii) a bottom pointer to a linked list where this node is head.
Each of the sub-linked-list is in sorted order.
Flatten the Link List such that all the nodes appear in a single level while maintaining the sorted order. 
Note: The flattened list will be printed using the bottom pointer instead of next pointer.
*
*/

Solution :-


    struct compare
    { 
        bool operator()(const Node *l,const Node *r)
        {
            return l->data > r->data;
        }
    };
Node *flatten(Node *root)
{
   priority_queue<Node *,vector<Node *>,compare> minh;
   Node *head=new Node(0);
   Node *f=head;
   Node *p=root;
   while(p)
   {
       minh.push(p);
       p=p->next;
   }
   while(minh.size()>0)
   {
       Node *temp=minh.top();
       minh.pop();
       f->bottom = temp;
       f=temp;
       if(temp->bottom)
       minh.push(temp->bottom);
   }
   return head->bottom;
}
